//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TomaPedidos.ControlAccesoWS {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ControlAccesoException", Namespace="http://schemas.datacontract.org/2004/07/WCFServiceControlAcceso.Errores")]
    [System.SerializableAttribute()]
    public partial class ControlAccesoException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodigoField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescripcionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Codigo {
            get {
                return this.CodigoField;
            }
            set {
                if ((object.ReferenceEquals(this.CodigoField, value) != true)) {
                    this.CodigoField = value;
                    this.RaisePropertyChanged("Codigo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Descripcion {
            get {
                return this.DescripcionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescripcionField, value) != true)) {
                    this.DescripcionField = value;
                    this.RaisePropertyChanged("Descripcion");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ControlAccesoWS.IControlAccesoService")]
    public interface IControlAccesoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlAccesoService/DoWork", ReplyAction="http://tempuri.org/IControlAccesoService/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlAccesoService/DoWork", ReplyAction="http://tempuri.org/IControlAccesoService/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlAccesoService/ValidarAcceso", ReplyAction="http://tempuri.org/IControlAccesoService/ValidarAccesoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(TomaPedidos.ControlAccesoWS.ControlAccesoException), Action="http://tempuri.org/IControlAccesoService/ValidarAccesoControlAccesoExceptionFault" +
            "", Name="ControlAccesoException", Namespace="http://schemas.datacontract.org/2004/07/WCFServiceControlAcceso.Errores")]
        bool ValidarAcceso(string UserName, string UserPassw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IControlAccesoService/ValidarAcceso", ReplyAction="http://tempuri.org/IControlAccesoService/ValidarAccesoResponse")]
        System.Threading.Tasks.Task<bool> ValidarAccesoAsync(string UserName, string UserPassw);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IControlAccesoServiceChannel : TomaPedidos.ControlAccesoWS.IControlAccesoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ControlAccesoServiceClient : System.ServiceModel.ClientBase<TomaPedidos.ControlAccesoWS.IControlAccesoService>, TomaPedidos.ControlAccesoWS.IControlAccesoService {
        
        public ControlAccesoServiceClient() {
        }
        
        public ControlAccesoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ControlAccesoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ControlAccesoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ControlAccesoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public bool ValidarAcceso(string UserName, string UserPassw) {
            return base.Channel.ValidarAcceso(UserName, UserPassw);
        }
        
        public System.Threading.Tasks.Task<bool> ValidarAccesoAsync(string UserName, string UserPassw) {
            return base.Channel.ValidarAccesoAsync(UserName, UserPassw);
        }
    }
}
